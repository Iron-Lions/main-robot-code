package org.firstinspires.ftc.teamcode.TeleOP;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;

@TeleOp(name="IntoDeep_TeleOPNew", group="TeleOP")
public class IntoDeep_TeleOPNew extends LinearOpMode {
    @Override
    public void runOpMode() throws InterruptedException {
        // Declare our motors
        // Make sure your ID's match your configuration
        DcMotor motorFrontLeft = hardwareMap.dcMotor.get("Front_Left");
        DcMotor motorBackLeft = hardwareMap.dcMotor.get("Back_Left");
        DcMotor motorFrontRight = hardwareMap.dcMotor.get("Front_Right");
        DcMotor motorBackRight = hardwareMap.dcMotor.get("Back_Right");
        
        DcMotor liftR = hardwareMap.dcMotor.get("rightVerticalMotor");
        DcMotor liftL = hardwareMap.dcMotor.get("leftVerticalMotor");
        DcMotor extender = hardwareMap.dcMotor.get("horizontalLift");
        
        Servo gClaw = hardwareMap.servo.get("groundClawWrist");
        Servo gClawWrist = hardwareMap.servo.get("groundClaw");
        Servo lClaw = hardwareMap.servo.get("liftClaw");
        Servo lClawElbow = hardwareMap.servo.get("liftClawElbow");
        Servo lClawWrist = hardwareMap.servo.get("liftClawWrist");
        
        //Port 0: liftClaw
        //Port 1: liftClawWrist
        //Port 2: liftClawElbow
        //Port 3: groundClawWrist
        //Port 4: groundClaw
        
        // Reverse the right side motors. This may be wrong for your setup.
        // If your robot moves backwards when commanded to go forwards,
        // reverse the left side instead.
        // See the note about this earlier on this page.
        //motorFrontLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        //motorBackLeft.setDirection(DcMotorSimple.Direction.REVERSE);
        motorFrontRight.setDirection(DcMotorSimple.Direction.REVERSE);
        motorBackRight.setDirection(DcMotorSimple.Direction.REVERSE);

        //elbow.setDirection(Servo.Direction.REVERSE);
        
        double scaleSpeed = 0.5;
        
        waitForStart();

        if (isStopRequested()) return;

        while (opModeIsActive()) {
            
            double y = -gamepad1.left_stick_y; // Remember, Y stick value is reversed
            double x = gamepad1.left_stick_x * 1.1; // Counteract imperfect strafing
            double rx = -gamepad1.right_stick_x;
            
            double liftPower = gamepad2.left_stick_y;
            double extenderPower = gamepad2.right_stick_y;
            
            liftR.setPower(liftPower);
            liftL.setPower(-liftPower);
            
            extender.setPower(extenderPower);
            
            if(gamepad1.right_trigger > 0.5) {
                scaleSpeed = 0.2;
            } else {
                scaleSpeed = 0.5;
            }
            //Open/close ground claw
            if(gamepad2.a) {
                gClaw.setPosition(0.55);
            }
            if(gamepad2.b) {
                gClaw.setPosition(0.95);
            }
            //Raise/lower ground claw
            if(gamepad2.x) {
                gClawWrist.setPosition(1);
            }
            if(gamepad2.y) {
                gClawWrist.setPosition(0.15);
            }
            //Raise/lower lift claw
            if(gamepad2.right_bumper) {
                lClawWrist.setPosition(1);
            }
            if(gamepad2.left_bumper) {
                lClawWrist.setPosition(0);
            }
            //Open/close lift wrist
            if(gamepad2.dpad_left) {
                lClaw.setPosition(0); 
            }
            if(gamepad2.dpad_right) {
                lClaw.setPosition(0.5);
            }
            //Raise/lower lift elbow
            if(gamepad2.dpad_up) {
                lClawElbow.setPosition(0);
            }
            if(gamepad2.dpad_down) {
                lClawElbow.setPosition(0.85);
            }
            // Denominator is the largest motor power (absolute value) or 1
            // This ensures all the powers maintain the same ratio,
            // but only if at least one is out of the range [-1, 1]
            double denominator = Math.max(Math.abs(y) + Math.abs(x) + Math.abs(rx), 1);
            double frontLeftPower = (y + x + rx) / denominator;
            double backLeftPower = (y - x + rx) / denominator;
            double frontRightPower = (y - x - rx) / denominator;
            double backRightPower = (y + x - rx) / denominator;
            
            motorFrontLeft.setPower(scaleSpeed * frontLeftPower);
            motorBackLeft.setPower(scaleSpeed * backLeftPower);
            motorFrontRight.setPower(scaleSpeed * frontRightPower);
            motorBackRight.setPower(scaleSpeed * backRightPower);
            
            telemetry.update();
        }
    }
}